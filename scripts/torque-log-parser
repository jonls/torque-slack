#!/usr/bin/env python

"""Parse Torque job information and output as JSON"""

import sys
import os
import argparse
import json
import logging
from Queue import Queue, Empty

import yaml

from torque_slack import torque

logger = logging.getLogger(__name__)


if __name__ == '__main__':
    # Parse command line arguments
    parser = argparse.ArgumentParser(
        description='Parse Torque job information and output as JSON')
    parser.add_argument('--config', metavar='file',
                        help='Configuration file')
    args = parser.parse_args()

    logging.basicConfig(level=logging.INFO)

    # Load configuration file
    if args.config:
        with open(args.config, 'r') as f:
            config = yaml.load(f)
    else:
        config = {}

    # Run Torque log collector
    logger.info('Running Torque log collector...')
    event_queue = Queue()
    torque_home = None
    if 'torque_home' in config:
        torque_home = config['torque_home']

    collector = torque.TorqueLogCollector(event_queue, torque_home)

    # Make stdout line buffered
    sys.stdout = os.fdopen(sys.stdout.fileno(), 'w', 1)

    try:
        while True:
            # A timeout has to be specified here, otherwise ctrl-c does not
            # interrupt the blocking get call. Let's set it to one year.
            try:
                event = event_queue.get(True, 365*24*60*60)
            except Empty:
                continue

            event['timestamp'] = event['timestamp'].isoformat()
            sys.stdout.write(json.dumps(event, separators=(',', ':')) + '\n')
    except KeyboardInterrupt:
        pass

    logger.info('Main thread ended.')

    logger.info('Stopping log collector...')
    collector.stop()

    logger.info('Done.')
